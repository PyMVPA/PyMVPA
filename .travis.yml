# vim ft=yaml
# travis-ci.org definition for PyMVPA build (based on nipype configuration
# which in turn was based on nipy)
#
# We pretend to be erlang because we need can't use the python support in
# travis-ci; it uses virtualenvs, they do not have numpy, scipy, matplotlib,
# and it is impractical to build them
language: erlang
env:
 global:
    - PY=python PYSUF=''
    # - PYTHON=python3 PYSUF=3 : python3-numpy not currently available
 matrix:
    - PYTHON=$PY
    - PYTHON="$PY -O"
    - PYTHONPATH=mvpa2/tests/badexternals
    - MVPA_DEBUG=ENFORCE_CA_ENABLED MVPA_DEBUG_METRICS=all
before_install:
    # The ultimate one-liner setup for NeuroDebian repository
    - bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
    # - sudo apt-get install $PYTHON-dev
    - sudo apt-get install swig $PY-numpy $PY-scipy $PY-matplotlib $PY-h5py $PY-nose $PY-nibabel
    - travis_retry sudo apt-get install shogun-python-modular $PY-mdp $PY-psutil $PY-sklearn liblapack-dev $PY-statsmodels $PY-reportlab ipython
install:
    - make
    - if [[ $MVPA_DEBUG_METRICS == all ]]; then pip install --user -v coveralls; fi
script:
    - export MVPA_TESTS_LABILE=no PYTHONPATH=. MVPA_MATPLOTLIB_BACKEND=agg PATH=$HOME/.local/bin:$PATH MVPA_EXTERNALS_RAISE_EXCEPTION=off
    # Run only nonlabile tests but via coverage for the last entry in the matrix
    - if [[ $MVPA_DEBUG_METRICS == all ]]; then cmd="coverage run --rcfile=.travis_coveragerc"; else cmd=""; fi
    - eval $cmd $(which nosetests) -v mvpa2 --with-doctest
after_success:
    - if [[ $MVPA_DEBUG_METRICS == all ]]; then coveralls; fi
