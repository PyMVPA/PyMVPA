# vim ft=yaml
# travis-ci.org definition for PyMVPA build (based on nipype configuration
# which in turn was based on nipy)
#
# We pretend to be erlang because we need can't use the python support in
# travis-ci; it uses virtualenvs, they do not have numpy, scipy, matplotlib,
# and it is impractical to build them
language: erlang
env:
 global:
    - PY=python PYSUF=''
    # - PYTHON=python3 PYSUF=3 : python3-numpy not currently available
 matrix:
    - PYTHON=$PY
    - PYTHON="$PY -O"
    - PYTHONPATH=mvpa2/tests/badexternals
    # Some DEBUG targets are excluded since either their output could not be redirected
    # or they augment output in the doctests
    - MVPA_DEBUG='^.(?!MLR_|G_.*|IBSVM|S_ID).*' MVPA_DEBUG_METRICS=all MVPA_DEBUG_OUTPUT=/dev/null MVPA_TESTS_VERBOSITY=2 MVPA_TESTS_WTF=1 MVPA_DEBUG_WTF=1
before_install:
    # The ultimate one-liner setup for NeuroDebian repository
    - bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
    # - sudo apt-get install $PYTHON-dev
    - travis_retry sudo apt-get install swig $PY-numpy $PY-scipy $PY-matplotlib $PY-h5py $PY-nose $PY-nibabel
    # Optional Python modules
    # Note: it looks like the line could be truncated, thus spreading them through multiple lines
    - travis_retry sudo apt-get install shogun-python-modular $PY-mdp $PY-psutil $PY-sklearn
    - travis_retry sudo apt-get install liblapack-dev $PY-statsmodels $PY-reportlab ipython
    - travis_retry sudo apt-get install $PY-pywt $PY-lxml $PY-pprocess
    # Very optional R interfaces via rpy2
    - travis_retry sudo apt-get install $PY-rpy2
    - mkdir -p $PWD/R-libs
    - echo "install.packages(c('energy', 'elasticnet'), '$PWD/R-libs', repos='http://cran.r-project.org')" | R --no-save
install:
    - make
    - if [[ $MVPA_DEBUG_METRICS == all ]]; then pip install --user -v coveralls; fi
script:
    - export MVPA_TESTS_LABILE=no PYTHONPATH=. MVPA_MATPLOTLIB_BACKEND=agg PATH=$HOME/.local/bin:$PATH MVPA_EXTERNALS_RAISE_EXCEPTION=off R_LIBS=$PWD/R-libs
    # Run only nonlabile tests but via coverage for the last entry in the matrix
    - if [[ $MVPA_DEBUG_METRICS == all ]]; then cmd="coverage run --rcfile=.travis_coveragerc"; else cmd=""; fi
    - eval $cmd $(which nosetests) -v mvpa2 --with-doctest -s
after_success:
    - if [[ $MVPA_DEBUG_METRICS == all ]]; then coveralls; fi
