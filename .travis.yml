# vim ft=yaml
# travis-ci.org definition for PyMVPA build (based on nipype configuration
# which in turn was based on nipy)
#
# We pretend to be erlang because we need can't use the python support in
# travis-ci; it uses virtualenvs, they do not have numpy, scipy, matplotlib,
# and it is impractical to build them
language: erlang
cache:
  - apt
env:
 global:
    - COVERAGE="coverage run --rcfile=.travis_coveragerc"
    - PY=python3 PYSUF=3 COVERAGE="later!"
    - DOCTESTS=--with-doctest
    - PYPI=0
 matrix:
    # Later , may be
    # - PYTHON=$PY PYPI=1
    # Not sure if we care any longer enough
    # - PYTHON="$PY -O"
    # Doctests are unguarded against absent externals, so no --with-doctest for them
    - PYSUF=''
    - PYSUF=3
    - PYSUF='' PYTHONPATH=mvpa2/tests/badexternals
    # Some DEBUG targets are excluded since either their output could
    # not be redirected or they augment output in the doctests
    - PYSUF='' MVPA_DEBUG=ENFORCE_CA_ENABLED
    # So we get duecredit report printed out, and identical to original run so we could compare
    # time impact
    - PYSUF='' DUECREDIT_ENABLE=yes
before_install:
    - PY=python$PYSUF
    # PY 2 vs 3 specifics
    - if [ "$PYSUF" = '' ]; then
        TESTFILES=mvpa2;
        DEB_PKGS=$PY-statsmodels $PY-pywt $PY-pprocess $PY-nipy $PY-rpy2;
      else
        TESTFILES=mvpa2/tests/test_base.py;
        DEB_PKGS=;
      fi
    # to prevent IPv6 being used for APT
    - sudo bash -c "echo 'Acquire::ForceIPv4 \"true\";' > /etc/apt/apt.conf.d/99force-ipv4"
    # The ultimate one-liner setup for NeuroDebian repository
    - bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
    # - sudo apt-get install $PYTHON-dev
    - travis_retry sudo apt-get install swig
        $PY-numpy $PY-scipy $PY-matplotlib $PY-h5py $PY-nose $PY-nibabel $PY-mock
    # Optional Python modules
    # Note: it looks like the line could be truncated, thus spreading them through multiple lines
    # yoh: hm???
    - travis_retry sudo apt-get install
        $PY-psutil $PY-sklearn $PY-mdp liblapack-dev $PY-reportlab ipython
        $PY-lxml $PY-joblib
        $DEB_PKGS
    - mkdir -p $PWD/R-libs
    - echo "install.packages(c('energy', 'elasticnet'), '$PWD/R-libs', repos='http://cran.r-project.org')" | R --no-save
install:
    - make PYTHON=$PY
    - if [ ! -z "$COVERAGE" ]; then pip install --user -v coveralls codecov; fi
    - if [ ! -z "$DUECREDIT_ENABLE"]; then sudo apt-get install $PY-duecredit ; fi
script:
    # Run only nonlabile tests
    - export MVPA_EXTERNALS_RAISE_EXCEPTION=off  MVPA_MATPLOTLIB_BACKEND=agg
    - export MVPA_DEBUG_METRICS=all  MVPA_DEBUG_OUTPUT=/dev/null
    - export MVPA_TESTS_LABILE=no  MVPA_TESTS_VERBOSITY=2  MVPA_TESTS_WTF=1
    - export PATH=$HOME/.local/bin:$PATH  PYTHONPATH=.:$PYTHONPATH  R_LIBS=$PWD/R-libs
    # Temp disable lars tests -- fails across the board but does not replicate locally
    - export MVPA_EXTERNALS_HAVE_LARS=no
    # Temp: bring back coverage etc consistently
    #- export NOSETESTS=$(which nosetests)
    - echo $PY -m nose -s -v $DOCTESTS $TESTFILES
    - eval $PY -m nose -s -v $DOCTESTS $TESTFILES
    - make testsuite  # test that all imports are available within the suite. adjust Makefile or suite.py to fix if fails
    # we cannot run those in badexternals "mode"
    - if [ ! -z "$COVERAGE" ] && [ "$DOCTESTS" = "--with-doctest" ]; then make coveragecmdline; fi
after_success:
    - if [ ! -z "$COVERAGE" ]; then coveralls; codecov; fi
deploy:
  provider: pypi
  distributions: sdist
  user: yarikoptic
  password:
    secure: mTxbioGS+sdfxnJRbAGZCxjWlaGJx+KqXPfYGESKcg6IVaSUM9D4CUhxgHHW88FYSnkmCvwuu57w7AAot9FyG6Q/1q656gluCbEJzfDJerSH1S06HqAEmjSPJvIEG/zwvPIUm3RPc+8j9XtedztM3aVWkqBHAzvUzEnsX1jJpic=
  on:
    tags: true
    branch: master
    repo: PyMVPA/PyMVPA
    condition: "$PYPI == 1 && $TRAVIS_TAG =~ ^upstream/.*"
