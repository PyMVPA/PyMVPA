.. -*- mode: rst; fill-column: 78 -*-
.. ex: set sts=4 ts=4 sw=4 et tw=79:
  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
  #
  #   See COPYING file distributed along with the PyMVPA package for the
  #   copyright and license terms.
  #
  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###


.. _scenarios:

.. index:: analysis scenarios

********************
 Analysis Scenarios
********************

.. index:: searchlight, cross-validation, NIfTI

Searchlight
===========

The term Searchlight_ refers to an algorithm that runs a
scalar `DatasetMeasure` on all possible spheres of a certain size within a
dataset. The measure typically computed is a cross-validated transfer error
(see CrossValidatedTransferError_). The idea to use a searchlight as a
sensitivity analyzer stems from a paper by Kriegeskorte and colleagues
[1]_.

A searchlight analysis is can be easily performed. The following code snippet
shows a draft of a complete analysis.

  >>> from mvpa.datasets.maskeddataset import MaskedDataset
  >>> from mvpa.datasets.splitter import OddEvenSplitter
  >>> from mvpa.clfs.svm import LinearCSVMC
  >>> from mvpa.clfs.transerror import TransferError
  >>> from mvpa.algorithms.cvtranserror import CrossValidatedTransferError
  >>> from mvpa.measures.searchlight import Searchlight
  >>> from mvpa.misc.data_generators import normalFeatureDataset
  >>>
  >>> # overcomplicated way to generate an example dataset
  >>> ds = normalFeatureDataset(perlabel=10, nlabels=2, nchunks=2,
  ...                           nfeatures=10, nonbogus_features=[3, 7],
  ...                           snr=5.0)
  >>> dataset = MaskedDataset(samples=ds.samples, labels=ds.labels,
  ...                         chunks=ds.chunks)
  >>>
  >>> # setup measure to be computed in each sphere (cross-validated
  >>> # generalization error on odd/even splits)
  >>> cv = CrossValidatedTransferError(
  ...          TransferError(LinearCSVMC()),
  ...          OddEvenSplitter())
  >>>
  >>> # setup searchlight with 5 mm radius and measure configured above
  >>> sl = Searchlight(cv, radius=5)
  >>>
  >>> # run searchlight on dataset
  >>> sl_map = sl(dataset)

If this analysis is done on a fMRI dataset using `NiftiDataset` the resulting
searchlight map (`sl_map`) can be mapped back into the original dataspace
and viewed as a brain overlay. The :ref:`example section <example_searchlight>`
contains a typical application of this algorithm.

.. _Searchlight: api/mvpa.algorithms.searchlight.Searchlight-class.html

.. Mention the fact that it also is a special `SensitivityAnalyzer`

.. [1] Kriegeskorte, N., Goebel, R. & Bandettini, P. (2006).
       'Information-based functional brain mapping.' Proceedings of the
       National Academy of Sciences of the United States of America 103,
       3863-3868.
