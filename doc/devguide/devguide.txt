.. -*- mode: rst; fill-column: 78 -*-

  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
  #
  #   See COPYING file distributed along with the PyMVPA package for the
  #   copyright and license terms.
  #
  ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###

PyMVPA Developer Guidelines
===========================

.. contents:: Table of Contents
.. sectnum::


Documentation
-------------
Documentation of the code and supplementary material (such as this
file) should be done in reST_ (reStructuredText) light markup
language.  See `Demo
<http://docutils.sourceforge.net/docs/user/rst/cheatsheet.txt>`__ or a
`Cheatsheet
<http://docutils.sourceforge.net/docs/user/rst/demo.txt>`__ for a
quick demo.


Code Documentation
~~~~~~~~~~~~~~~~~~

Code must be documented in accordance to `epydoc + reST usage
guidelines <http://epydoc.sourceforge.net/manual-othermarkup.html>`__

Parameter lists should be written as definition lists and not bulleted lists.
For an example how to do it right, please see mvpa/datasets/dataset.py


Code Formatting
---------------
pylint
   Code should be conformant with Pylint_ driven by config located at
   `doc/misc/pylintrc <misc/pylintrc>`__.  It assumes camelback
   notation (classes start with capitals, functions with lowercase)
   and indentation using 4 spaces (ie no tabs) Variables are low-case
   and can have up to 2 _s.
2 empty lines
   According to original python style guidelines: single empty line to
   separate methods within class, and 2 empty lines between classes
   BUT we do 2 empty between methods, 3 empty between classes
module docstring
   Each module should start with a docstring describing the module
   (which is not inside the hashed-comment of each file) look at
   mapper or neighbor for tentative organization if copyright/license
   has to be present in each file.
header
   Each file should contain a header from `doc/misc/header.py <misc/header.py>`__.
notes
   Use following keywords will be caught by pylint to provide a
   summary of what yet to be done in the given file

   FIXME
     something which needs fixing (sooner than later)
   TODO
     future plan (ie later than sooner)
   XXX
     some concern/question
   YYY
     comment/answer to above mentioned XXX concern


Coding Conventions
------------------
__repr__
  most of the classes should provide meaningful and concise summary
  over their identity (name + parameters + some summary over results
  if any)

Naming Conventions
------------------

Function Arguments
~~~~~~~~~~~~~~~~~~

dataset vs data
  Ones which are supposed to be derived from Dataset_ class should
  have suffix (or whole name) ``dataset``. In contrast, if argument is
  expected to be simply a NumPy_ array, suffix should be ``data``. For
  example::

    class Classifier(Statefull):
       ...
       def train(self, dataset):
	   ...
       def predict(self, data):

    class FeatureSelection(Statefull):
	   ...
       def __call__(self, dataset, testdataset, callables=[]):


  Such convention should be enforced in all ``*train``,
  ``*predict`` functions of classifiers.

.. _Dataset: api/mvpa.datasets.dataset.Dataset-class.html
.. _NumPy: http://numpy.scipy.org/


Tests
-----
* Every more or less "interesting" bugfix should be accompanied by a
  unittest which might help to prevent it in the future refactoring
* Every new feature should have a unittest


Git Repository
--------------

Layout
~~~~~~

The repository is structured by a number of branches. Each developer should
prefix his/her branches with a unique string plus '/' (maybe initials or
similar). Currently there are:

  :mh: Michael Hanke
  :per: Per B. Sederberg
  :yoh: Yaroslav Halchenko

Each developer can have an infinite number of branches. If the number of
branches causes gitk output to exceed a usual 19" screen, the respective
developer has to spend some bucks (or euries) on new screens for all others
;-)

The main release branch is called *master*. This is a merge-only branch.
Features finished or updated by some developer are merged from the corresponding
branch into *master*. At a certain point the current state of *master* is
tagged -- a release is done.

Only usable feature should end-up in *master*. Ideally *master* should be
releasable at all times. Something must not be merged into master if *any* unit
test fails.

Additionally, there are packaging branches. They are labeled after the package
target (e.g. *debian* for a Debian package). Releases are merged into the
packaging branches, packaging get updated if necessary and the branch gets
tagged when a package version is released. Packaging branches may have
sub-branches, e.g. when a maintenance release for a package in some stable
distribution is necessary.

.. yoh: iirc we can't have 'debian' and 'debian/etch' but only smth like
.. 'debian_etch'. So I wonder if that might make sense to have debian/sid
.. right away instead of pure debian?
   mh: IMHO this is not a real issue. We would probably not maintain
   debian/etch, but instead whatever version is in etch, e.g. if 0.1.0-4 is in
   stable, we might have deb/0.1.0-4 branch. But we could do debian/release
   instead of just debian. Not sure if that is necessary though.


Commits
~~~~~~~

Please prefix all commit summaries with one (or more) of the following labels.
This should help others to easily classify the commits into meaningful
categories:

  * *BF* : bug fix
  * *RF* : refactoring
  * *NF* : new feature
  * *OPT* : optimization
  * *BK* : breaks something and/or tests fail
  * *PL* : making pylint happier


.. _reST: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html
.. _EmacsreST: http://docutils.sourceforge.net/docs/user/emacs.html
.. _Pylint: http://packages.debian.org/unstable/python/pylint
