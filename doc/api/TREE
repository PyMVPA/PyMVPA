
Mapper                              Dataset (S1)
  |                                    \- appendtohistory(item)
  | \-ICAMapper          \             |
MaskMapper                \-------  MappedDataset (S1, Mapper)
   \ forward(ndarray)                  |
                                    MaskedDataset (S1, mask)


Splitter                               ErrorFunction
  |                                         |
NFoldSplitter(S2)                     CrossValidation
     \ call(dataset)



   Clf  (LinearSVM)
  train          \- weights 
  predict
      |
 BoostedClassifier    


 Clf  <- optimizeClassifier(optimizer, clf, parameter_to_optimize)


CVA

 SensitivityAnalyzer
       \- sensitivity_map (1D array) <- __call__(dataset)
      |
 ClassifierBasedSensitivityAnalyzer(classifier)
      | \- CombinedSensitivityAnalyzer(splitter, sensanalyzer, combiner)
	  |      \-  __call__(dataset)
 PerturbationSensitivityAnalyzer   LinearSVMSensitivityAnalyzer   NonLinearSVMAnalyzer

default combiner = average

TheFunction
GeneralizationTesting



 OptimizerAlgorithm
      |
 LineSearchOptimizer   GridSearch   FeatureStrip(SensitivityAnalyzer)
                                       after train return ErrorFunction, sensitivity, 


 Optimizer
      |
   ParameterOptimizer(optimizeralgorithm, parameter, classifier)
   BoostedOptimizer(splitter, optimizer)


# NOTES

Sensitivity -> RankList (N.argsort)

sens <- Combine
dataset <- selectImportantFeature

RFE(dataset, sensAnalyzer):
do
  sens <- sensAnalyzer(dataset)
  dataset <- selectImportantFeature(dataset, sens)
until the world collapses into


smth
 |
smthClassifier(classifier, splitter)
 \ __call__(dataset)
    { splits < splitter(dataset)
      classifier.ty(
    

SEARCHLIGHT(dataset, smth)
foreach sphere do
 value <- smth(dataset[sphere])
done
