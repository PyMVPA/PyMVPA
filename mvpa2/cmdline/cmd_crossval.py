# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
#
#   See COPYING file distributed along with the PyMVPA package for the
#   copyright and license terms.
#
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
"""Cross-validation of a learner's performance

A learner is repeatedly trained on partitions of an input dataset that are
generated by a configurable partitioning scheme. After training the learners
predictions performance is tests on a separate partion of the data.

A summary of a learner performance is written to STDOUT. Depending on the
particular setup of the cross-validation analysis, either the learners raw
predictions or summary statistics are return in an output dataset.

"""

# magic line for manpage summary
# man: -*- % cross-validation of a learner's performance

__docformat__ = 'restructuredtext'

import numpy as np
import copy
import sys
import argparse
from mvpa2.base import verbose, warning, error
from mvpa2.datasets import vstack
if __debug__:
    from mvpa2.base import debug
from mvpa2.cmdline.helpers \
    import parser_add_common_args, parser_add_common_opt, \
           ds2hdf5, hdf2ds, learner_opt, partitioner_opt, \
           learner_space_opt, arg2errorfx

from mvpa2.measures.base import CrossValidation
from mvpa2.base.node import ChainNode

parser_args = {
    'formatter_class': argparse.RawDescriptionHelpFormatter,
}

lopt = copy.deepcopy(learner_opt)
lopt[2]['required'] = True
popt = copy.deepcopy(partitioner_opt)
popt[2]['required'] = True

cv_grp = ('options for cross-validation setup', [
    lopt[1:], learner_space_opt[1:], popt[1:],
])

output_grp = ('options for output configuration', [
    (('--errorfx',), dict(type=arg2errorfx,
        help="""error function to be applied to the targets and predictions
        of each cross-validation data fold. This can either be a name of
        any error function in PyMVPA's mvpa2.misc.errorfx module, or a file
        path to a Python script that creates a custom error function
        (advanced).""")),
])

def setup_parser(parser):
    from .helpers import parser_add_optgroup_from_def, \
        parser_add_common_attr_opts, single_required_hdf5output
    parser_add_common_args(parser, pos=['multidata'])
    parser_add_optgroup_from_def(parser, cv_grp)
    parser_add_optgroup_from_def(parser, output_grp)
    parser_add_optgroup_from_def(parser, single_required_hdf5output)

def run(args):
    dss = hdf2ds(args.data)
    verbose(3, 'Loaded %i dataset(s)' % len(dss))
    ds = vstack(dss)
    verbose(3, 'Concatenation yielded %i samples with %i features' % ds.shape)
    # setup generator for data folding -- put in a chain node for easy
    # ammending
    gennode = ChainNode([args.partitioner], space=args.partitioner.get_space())
    # set learner space
    args.learner.set_space(args.learner_space)
    # final CV node
    cv = CrossValidation(args.learner,
                         gennode,
                         errorfx=args.errorfx,
                         enable_ca=['stats'])
    # run CV
    res = cv(ds)
    # some meaningful output
    # XXX make condition on classification analysis only?
    print cv.ca.stats
    # and store
    ds2hdf5(res, args.output, compression=args.hdf5_compression)
    return ds
